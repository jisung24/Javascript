'use strict'
// 여기서부터 이제 obj type

// 프로그램 과정
// 1. input(사용자가 입력)
// 2. process(사용자가 원하는 값을 구해줌)
// 3. output(그 값이 나옴)

// ==> 이 모든 것들을 함수가 해준다!! 
// ==> 사실 모든 프로그램은 함수가 다야 그냥...;
// ==> ex) 사용자가 이름을 입력하면 내 정보가 나오는 함수. 등등

// ** 함수 **
// 1. 변수 : 함수에 들어가기에 앞서 잠시 보관해두는 사물함.
// 2. 연산자 : 함수에서 원하는 값을 return하기 위한 과정.
// 3. return : 원하는 값을 output! 

// ** 함수의 특징 **
// 1. 하나의 함수는 하나의 일을 하는것이 좋다.
// 2. 프로젝트에서 반복되는 일!! 
// ==> ex) 사용자 조회(이름을 받으면 정보가 뜨는 것)
// 3. 함수의 이름 ==> 함수가 하는 일을 잘 나타낼 수 있는 이름으로!!!!


// ! 함수도 object여서 Heap이라는 메모리에 저장됨.
// add라는 변수가 함수가 저장된 주소값을 갖고있음.
// 함수의 이름은 함수 객체의 주소값을 갖고있어.. => 객체와 같아! 


// !!!!!!! 요약 !!!!!!!

// 변수는 함수(처리)에 전달할 목적으로 잠깐 저장하는 것. 
// 변수 값을 함수에 전달 => 파라미터(call by value)
// 변수 내부에 있는 주소값을 전달 => 파라미터(call by reference)

// output => return 
// ! => 그래서 프로젝트는 그냥 무조건 함수야!!!!!!!!!

// 파라미터 : input하기 위해 잠시 변수에 저장해놓고 값을 전달하거나, 주소값을 저장해놓음.

// 메모리
// 함수는 object type이라서 함수의 이름은 함수의 주소값을 가지고있다.
// 함수의 객체의 주소값을 가지고있음.
// function add => add가 함수 블록을 가리키고 있음.

